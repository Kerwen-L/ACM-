class Solution(object):
    def robot(self, command, obstacles, x, y):
        """
        :type command: str
        :type obstacles: List[List[int]]
        :type x: int
        :type y: int
        :rtype: bool
        """
        self.c_list = []
        self.moveX=0
        self.moveY=0
        for c in command:
            if c == 'U':
                self.moveY+=1
            else:
                self.moveX+=1
            self.c_list.append(seqNode(self.moveX,self.moveY))
        self.step_len = len(command)
        
        if(self.judge(command,x,y)==False): 
            return False
        
        
        for item in obstacles:
            if(item[0]+item[1])>=(x+y):
                continue
            if(self.judge(command,item[0],item[1])): 
               return False
        return True
            
        
   
    #(X,Y)在轨道内就返回True
    def judge(self,command,X,Y):
        steps = X+Y
        rounds = steps//self.step_len 
        models = steps%self.step_len 
        
        if(models!=0):
            step_X = rounds*self.moveX+self.c_list[models-1].x
            step_Y = rounds*self.moveY+self.c_list[models-1].y
        else:
            step_X = rounds*self.moveX 
            step_Y = rounds*self.moveY 
    
        
        if(step_X==X) and (step_Y==Y):
            return True
        else:
            return False
        
       
  

class seqNode:
    def __init__(self):
        self.x=0
        self.y=0
        
    def __init__(self, x,y):
        self.x=x
        self.y=y